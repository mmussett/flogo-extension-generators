apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: simple-trigger-generator-v1
  title: Flogo Trigger Extension Scaffolder
  description: |
    Welcome to the Flogo Trigger Extension Scaffolder. This template generates a scaffold golang repository for creating Flogo trigger extension. 

    ## Pre-requisite actions before running this template

    Before running this template please head over to https://github.com/TIBCOSoftware/flogo-enterprise-hub and fork this repository.
    

    ## Post-actions to be done after running this template

    This template will create the Flogo Trogger Extension under the extensions folder in your forked version of this repository
    before committing the changes back.

    1. Clone the repository e.g. `gh repo clone mmussett/flogo-enterprise-hub`
    2. Run `go mod tidy` in the folder under extensions/<your-extension-name>

  tags:
    - flogo
    - generator
    - tibco
    - template
    - developer-hub
spec:
  owner: group:default/tibco-flogo-generators
  type: service

  parameters:
    - title: Flogo Enterprise Hub Repository Location
      description: >
        Please provide details of your github repository where your fork of TIBCOSoftware/flogo-enterprise-hub resides.
      required:
        - repoUrl
        - branchName
      properties:
        repoUrl:
          title: GitHub repository 
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
          default: "github.com?owner=mmussett&repo=flogo-enterprise-hub"
        branchName:
          title: Branch name
          type: string
          default: main
          description: Name of the branch to commit repository changes to

    - title: Contribution Details
      required:
        - extensionName
        - version
        - category
        - description
      properties:
        category:
          title: Category
          type: string
          description: Extension category e.g. general, default, crypto, logging
          ui:options:
            placeholder: general
        extensionName:
          title: ExtensionName
          type: string
          description: Extension name of the Trigger
          ui:options:
            placeholder: "logger"      
        version:
          title: Version
          type: string
          default: "1.0.0"
        description:
          title: Description
          type: string
          description: Brief one-line description of the extension
        overview:
          title: Overview
          type: string
          description: Overview of the extension
          default: "This extension provides the following features..."

    - title: Trigger Details
      properties:
        triggerList:
          title: List of triggers
          description: "Provide a list of one or more trigger names"
          type: array
          items:
            type: string
            title: Trigger Name
      required:
        - triggerList


    - title: Trigger Handler Configuration
      required:
        - hasHandlerString
        - hasHandlerBoolean
        - hasHandlerInteger
        - hasHandlerDecimal
        - hasHandlerObject
        - hasHandlerObjectWithSchema
        - hasHandlerParameters
      properties:
        hasHandlerString:
          title: Scaffolder to generate Trigger with handler string field?
          type: string
          enum:
            - yes
            - no
          default: yes          
        hasHandlerBoolean:
          title: Scaffolder to generate Trigger with handler boolean field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasHandlerInteger:
          title: Scaffolder to generate Trigger with handler integer field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasHandlerDecimal:
          title: Scaffolder to generate Trigger with handler decimal field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasHandlerObject:
          title: Scaffolder to generate Trigger with handler object field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasHandlerObjectWithSchema:
          title: Scaffolder to generate Trigger with handler object with schema field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasHandlerParameters:
          title: Scaffolder to generate Trigger with handler object parameter field?
          type: string
          enum:
            - yes
            - no
          default: no

    - title: Trigger Output Configuration
      required:
        - hasOutputString
        - hasOutputBoolean
        - hasOutputInteger
        - hasOutputDecimal
        - hasOutputObject
        - hasOutputObjectWithSchema
      properties:
        hasOutputString:
          title: Scaffolder to generate Trigger with String output field?
          type: string
          enum:
            - yes
            - no
          default: yes          
        hasOutputBoolean:
          title: Scaffolder to generate Trigger with String output field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasOutputInteger:
          title: Scaffolder to generate Trigger with String output field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasOutputDecimal:
          title: Scaffolder to generate Trigger with String output field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasOutputObject:
          title: Scaffolder to generate Trigger with String output field?
          type: string
          enum:
            - yes
            - no
          default: no
        hasOutputObjectWithSchema:
          title: Scaffolder to generate Trigger with String output field?
          type: string
          enum:
            - yes
            - no
          default: no


  # The import flow consist out of 4 steps:
  # 1. Fetch the project from GitHub
  # 2. Generate the Component YAML
  # 3. Commit the Component YAML file back to the GitHub project branch creating a pull request
  # 4. Register the Component in the catalog

  steps:
    - id: clone
      name: Clone the Project
      action: tibco:git:clone
      input:
        failOnError: true
        repoUrl: ${{ "https://"  + (parameters.repoUrl | parseRepoUrl).host + "/" + (parameters.repoUrl | parseRepoUrl).owner + "/" +  (parameters.repoUrl | parseRepoUrl).repo }}

    - id: makeTopLevelFolder
      name: Make top-level folder in Repository
      action: file:makeDirectory
      input:
        dirPath: ${{ "extensions/" + parameters.extensionName }}

    - id: makeSrcFolder
      name: Make src folder in Repository
      action: file:makeDirectory
      input:
        dirPath: ${{ "extensions/" + parameters.extensionName + "/src" }}

    - id: makeTriggerFolder
      name: Make trigger folder in src (if required)
      action: file:makeDirectory
      input:
        dirPath: ${{ "extensions/" + parameters.extensionName + "/src/trigger" }}

    - id: makeTriggerSubFolder
      name: Make trigger sub-folder under src/trigger
      each: ${{ parameters.triggerList}}
      action: file:makeDirectory
      input:
        dirPath: ${{ "extensions/" + parameters.extensionName + "/src/trigger/" + each.value }}      

    - id: makeTriggerIconSubFolder
      name: Make trigger sub-folder under src/trigger
      each: ${{ parameters.triggerList}}
      action: file:makeDirectory
      input:
        dirPath: ${{ "extensions/" + parameters.extensionName + "/src/trigger/" + each.value + "/icons"}}      

    - id: makeTriggerIcons
      name: Make Trigger icons
      each: ${{ parameters.triggerList}}
      action: fetch:template
      input:
        url: ./skeletons/trigger/icons
        targetPath: ${{ "extensions/" + parameters.extensionName + "/trigger/" + each.value + "/icons" }}
        replace: true
        values:
          extensionName: ${{ parameters.extensionName }}
          triggerName: ${{ each.value }}

    - id: generateTriggerReadme
      name: Generate trigger README.md
      each: ${{ parameters.triggerList}}
      action: fetch:template:file
      input:
        url: ./skeletons/trigger/README.md
        targetPath: ${{ "extensions/" + parameters.extensionName + "/trigger/" + each.value + "/README.md" }}
        replace: true
        values:
          extensionName: ${{ parameters.extensionName }}
          triggerName: ${{ each.value }}

    - id: generateTriggerJson
      name: Generate trigger.json
      each: ${{ parameters.triggerList}}
      action: fetch:template:file
      input:
        url: ./skeletons/trigger/trigger.json.njk
        targetPath: ${{ "extensions/" + parameters.extensionName + "/trigger/" + each.value + "/trigger.json" }}
        replace: true
        values:
          extensionName: ${{ parameters.extensionName }}
          owner: ${{ (parameters.repoUrl | parseRepoUrl).owner }}
          category: ${{ parameters.category }}
          version: ${{ parameters.version }}
          triggerName: ${{ each.value }}
          hasConnectionManager: ${{ parameters.hasConnectionManager }}
          hasHandlerString: ${{ parameters.hasHandlerString }}
          hasHandlerBoolean: ${{ parameters.hasHandlerBoolean }}
          hasHandlerDropdown: ${{ parameters.hasHandlerDropdown }}
          hasHandlerDateTime: ${{ parameters.hasHandlerDateTime }}
          hasHandlerInteger: ${{ parameters.hasHandlerInteger }}
          hasHandlerDecimal: ${{ parameters.hasHandlerDecimal }}
          hasOutputString: ${{ parameters.hasOutputString }}
          hasOutputBoolean: ${{ parameters.hasOutputBoolean }}
          hasOutputInteger: ${{ parameters.hasOutputInteger }}
          hasOutputDecimal: ${{ parameters.hasOutputDecimal }}
          hasOutputObject: ${{ parameters.hasOutputObject }}
          hasOutputObjectWithSchema: ${{ parameters.hasOutputObjectWithSchema }}
          
    - id: generateMetadataGo
      name: Generate metadata.go
      each: ${{ parameters.triggerList}}
      action: fetch:template:file
      input:
        url: ./skeletons/trigger/metadata.go.njk
        targetPath: ${{ "extensions/" + parameters.extensionName + "/trigger/" + each.value + "/metadata.go" }}
        replace: true
        values:
          extensionName: ${{ parameters.extensionName }}
          owner: ${{ (parameters.repoUrl | parseRepoUrl).owner }}
          category: ${{ parameters.category }}
          version: ${{ parameters.version }}
          triggerName: ${{ each.value }}
          hasConnectionManager: ${{ parameters.hasConnectionManager }}
          hasHandlerString: ${{ parameters.hasHandlerString }}
          hasHandlerBoolean: ${{ parameters.hasHandlerBoolean }}
          hasHandlerDropdown: ${{ parameters.hasHandlerDropdown }}
          hasHandlerDateTime: ${{ parameters.hasHandlerDateTime }}
          hasHandlerInteger: ${{ parameters.hasHandlerInteger }}
          hasHandlerDecimal: ${{ parameters.hasHandlerDecimal }}
          hasOutputString: ${{ parameters.hasOutputString }}
          hasOutputBoolean: ${{ parameters.hasOutputBoolean }}
          hasOutputInteger: ${{ parameters.hasOutputInteger }}
          hasOutputDecimal: ${{ parameters.hasOutputDecimal }}
          hasOutputObject: ${{ parameters.hasOutputObject }}
          hasOutputObjectWithSchema: ${{ parameters.hasOutputObjectWithSchema }}

    - id: generateTriggerGo
      name: Generate trigger.go
      each: ${{ parameters.triggerList}}
      action: fetch:template:file
      input:
        url: ./skeletons/trigger/trigger.go.njk
        targetPath: ${{ "extensions/" + parameters.extensionName + "/trigger/" + each.value + "/trigger.go" }}
        replace: true
        values:
          extensionName: ${{ parameters.extensionName }}
          category: ${{ parameters.category }}
          version: ${{ parameters.version }}
          triggerName: ${{ each.value }}
          hasConnection: ${{ parameters.scaffoldConnector }}

    - id: generateTriggerTestGo
      name: Generate trigger_test.go
      each: ${{ parameters.triggerList}}
      action: fetch:template:file
      input:
        url: ./skeletons/trigger/trigger_test.go.njk
        targetPath: ${{ "extensions/" + parameters.extensionName + "/trigger/" + each.value + "/trigger_test.go" }}
        replace: true
        values:
          triggerName: ${{ each.value }}


    - id: generateGoMod
      name: Generate go.mod
      action: fetch:template:file
      input:
        url: ./skeletons/go.mod.njk
        targetPath: ${{ "extensions/" + parameters.extensionName + "/go.mod" }}
        replace: true
        values:
          owner:   ${{ (parameters.repoUrl | parseRepoUrl).owner }}
          extensionName: ${{ parameters.extensionName }}

    - id: generateReadme
      name: Generate top-level README.md
      action: fetch:template:file
      input:
        url: ./skeletons/README.md
        targetPath: ${{ "extensions/" + parameters.extensionName + "/README.md" }}
        replace: true
        values:
          extensionName: ${{ parameters.extensionName }}
          overview: ${{ parameters.overview}}
          shortName: ${{ parameters.extensionName }}
          description: ${{ parameters.description }}

    - id: push
      name: Push Current Repo
      action: tibco:git:push
      input:
        failOnError: true

  output:
    links:
      # If you are not using register step above, remove the below Open in catalog link.
      - title: Repository (Pull Request)
        url: ${{ steps.cpr.output.remoteUrl }}
